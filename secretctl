#!/usr/bin/env bash

set -e

function usage {
  if [[ -n $1 ]]; then echo "$1"; echo; fi

cat << EOF
Usage: secretctl CMD [ARGS]

A simple gpg-based workflow for shared encryption of secrets.

secretctl works by maintaining a directory containing public keys
and a keyfile that maps the key ID to the key name (basename of the key file)

Generate a key with: gpg --gen-key

Commands:

  share KEYID [KEYNAME]   Exports a gpg key to be shared for future encryptions.
                              Exports to .gpg-keys keydir searching up from working dir
                              Will create .gpg-keys in current directory if not found
                          KEYID is the hex ID of a public key which is output when
                              creating (gpg --gen-key) or listing keys (gpg --list-keys):
                              - given: pub rsa2048/A69BF163 2015-03-29
                              - KEYID is A69BF163
                          KEYNAME is a human-recognizable short name for the key
                              Defaults to USER_HOSTNAME

  sync                    Synchronizes keydir with keychain by importing all public keys
                          in the keydir into your keychain

  encrypt FILENAME ...    Encrypts one or more files with all the public keys in the keydir
                          Outputs the encrypted file(s) as FILENAME.gpg

  decrypt FILENAME ...    Decrypts one or more files with your keyring
                          Outputs the decrypted file(s) without the .gpg suffix

  reencrypt FILENAME ...  Re-encrypts one or more files with your keyring
                          This command simplifies the process of decrypting and then encrypting

  clean                   Remove all decrypted files that have an encrypted counterpart

  list                    List all public keys which have been imported to your local store.

EOF

  exit 1
}

# Commands that probably aren't needed all that much anymore
  # sign                    Sign all imported keys with your own private key.
  #                         This allows encryption of files without gpg prompting about untrusted keys

  # trust                   Set trust level on all imported public keys to '5' (full trust)
  #                         This allows encryption of files without gpg prompting about untrusted
  #                         keys if the keys are signed by another trusted user.
  #                         Note: This currently would override the 'ultimate' trust given to your own key

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
WORKDIR=$PWD

# Searches up the path for a dir. Changes directory. returns 0 if found, else 1
function upsearch () {
  test -d "$1" && return 0 || test / == "$PWD" && return 1 || cd .. && upsearch "$1"
}

# Search for the KEYDIRNAME, and restore working dir
KEYDIRNAME=.gpg-keys
upsearch $KEYDIRNAME || cd $WORKDIR
KEYDIR=$PWD/$KEYDIRNAME
KEYLIST=$KEYDIR/keylist
cd $WORKDIR
declare -A KEYIDS


function die {
  echo $1
  exit 1
}


function load_keys {
  test -f "$KEYLIST" || die "ERROR: keylist not found at $KEYLIST"
  while IFS=$'\n' read -r line; do
      keyid=$(echo $line | awk '{print $1}')
      keyname=$(echo $line | awk '{print $2}')
      KEYIDS+=(["$keyid"]="$keyname")
  done < $KEYLIST
}

function encrypt_file {
  load_keys

  local decrypted_file=$1
  local encrypted_file=${decrypted_file}.gpg
  test -f "$decrypted_file" || die "ERROR: file does not exist: $decrypted_file"

  RECIPIENTS=""
  for id in ${!KEYIDS[@]}; do RECIPIENTS="$RECIPIENTS -r $id"; done
  test -n "$RECIPIENTS" || die "ERROR: No keys found in $KEYLIST"

  # echo gpg $RECIPIENTS -o $encrypted_file -e $decrypted_file
  gpg -q $RECIPIENTS -o $encrypted_file -e $decrypted_file
  echo "Encrypted as $encrypted_file"
}

function encrypt_files {
  test -n "$1" || die "ERROR: Must specify at least one file to encrypt"
  for f in $@; do echo "Encrypting $f"; encrypt_file $f; done
  echo "Completed. Finished encrypting $# file(s)."
}

function decrypt_file {
  local encrypted_file=$1
  local decrypted_file="$(dirname $encrypted_file)/$(basename $encrypted_file .gpg)"

  test -n "$encrypted_file" || usage "ERROR: must specify file to decrypt"

  gpg -q -o $decrypted_file -d $encrypted_file
  echo "Decrypted to $decrypted_file"
}

function decrypt_files {
  test -n "$1" || die "ERROR: Must specify at least one file to decrypt"
  for f in $@; do echo "Decrypting $f"; decrypt_file $f; done
  echo "Completed. Finished decrypting $# file(s)."
}

function reencrypt_files {
  test -n "$1" || die "ERROR: Must specify at least one file to reencrypt"
  for f in $@; do
    echo "Decrypting $f"
    rm -f "$(dirname $f)/$(basename $f .gpg)" > /dev/null
    decrypt_file $f

    echo "Encrypting $f"
    rm "$f" > /dev/null
    encrypt_file "$(dirname $f)/$(basename $f .gpg)"
    rm "$(dirname $f)/$(basename $f .gpg)" > /dev/null
  done
  echo "Completed. Finished reencrypting $# file(s)."
}

function export_key {
  local keyid=$(echo $1 | sed 's/^.*\///')
  local keyname="${2:-${USER}_$(hostname)}"
  local keyfile="$KEYDIR/$keyname.pub"

  test -n "$keyid" || usage "ERROR: must set KEYID"
  test -n "$keyname" || usage "ERROR: must set KEYNAME"

  if [[ ! -d "$KEYDIR" ]]; then
    echo "Creating directory: $KEYDIR"
    mkdir -p `dirname $keyfile`
  fi

  if [[ -f "$keyfile" ]]; then
    die "Public key file '$keyfile' already exists. To replace it, remove it and it's keylist entry and rerun."
  fi

  gpg --export --armor -o $keyfile "$keyid" | grep -v "WARNING" || die "Not a valid KEYID"
  echo "$keyid $keyname" >> $KEYLIST
  echo "Complete. Sharing $keyid as $keyname and added to the keylist."
}

# Useful for exporting the signed version of public keys
function export_keys {
  load_keys
  for id in ${!KEYIDS[@]}; do
    gpg --armor --export $id > $KEYDIR/${KEYIDS["$id"]}.pub
  done
  echo "Finished exporting all public keys."
}

function import_key {
  local keyid=$1
  local keypath=$2
  echo "Importing $keypath"
  gpg -q --import $keypath
  trust_key $keyid
  echo "Signing key: $id"
  gpg -q --sign-key $id
}

function import_keys {
  load_keys
  for id in ${!KEYIDS[@]}; do
    gpg --list-keys $id &>/dev/null || import_key $id "$KEYDIR/${KEYIDS["$id"]}.pub"
  done

  echo "Finished importing all public keys. Ready to encrypt."
}

function sign_keys {
  load_keys
  for id in ${!KEYIDS[@]}; do
    echo "Signing key: $id"
    gpg --sign-key $id
  done
  echo "Finished signing all public keys."
}

function trust_key {
  # Trust levels: 6=ultimate, 5=full, 4=marginal, 3=untrusted, 2=unknown
  # Full ownership requires a trust path to some UserID on the key already.
  # Utimate should imply key ownership, would prefer to use trust-model=always then ultimate trust
  local id=$1
  local trustlevel=${2:-5} # Default trust level = 5
  echo "Setting trust to $trustlevel for key: $id"
  echo "$(gpg --fingerprint $id | egrep -o '([0-9A-F]{4}\s*){5,20}' | tr -d ' '):$trustlevel:" | gpg -q --import-ownertrust
}

function trust_keys {
  load_keys
  local trustlevel=5
  for id in ${!KEYIDS[@]}; do
    trust_key $id $trustlevel
  done
  echo "Finished setting trust on all public keys. Ready to encrypt."
}

function list_keys {
  load_keys
  printf "ID        Name\n"
  for id in ${!KEYIDS[@]}; do
      printf "%s  %s\n" $id ${KEYIDS["$id"]}
  done
}

# rm all files that have a .gpg counterpart
function remove_decrypted_files {
  local cleandir=${1:-$WORKDIR}
  find $cleandir -type f -name "*.gpg" -exec sh -c 'echo $(dirname {})/$(basename {} .gpg)' \; | xargs rm -fv
}

CMD=$1
shift || usage

case $CMD in
    list )
        list_keys ;;
    share )
        export_key $@ ;;
    sync )
        import_keys ;;
    encrypt )
        encrypt_files $@ ;;
    decrypt )
        decrypt_files $@ ;;
    reencrypt )
        reencrypt_files $@ ;;
    clean )
        remove_decrypted_files $@ ;;
    # undocumented
    sign )
        sign_keys ;;
    trust )
        trust_keys ;;
    export )
        export_keys ;;
    * )
        usage ;;
esac
