#!/bin/bash

set -e

function usage {
  if [[ -n $1 ]]; then echo "$1"; echo; fi

cat << EOF
Usage: secretctl CMD [ARGS]

A simple gpg-based workflow for shared encryption of secrets.

secretctl works by maintaining a directory containing public keys
and a keyfile that maps the key ID to the key name (basename of the key file)

Generate a key with: gpg --gen-key

Commands:

  export KEYID [KEYNAME]  Exports a gpg key to be shared for future encryptions.
                              Exports to .gpg-keys keydir searching up from working dir
                              Will create .gpg-keys in current directory if not found
                          KEYID is the hex ID of a public key which is output when
                              creating (gpg --gen-key) or listing keys (gpg --list-keys):
                              - given: pub rsa2048/A69BF163 2015-03-29
                              - KEYID is A69BF163
                          KEYNAME is a human-recognizable short name for the key
                              Defaults to ${USER}_$(hostname)

  import                  Imports all public keys in the keydir into your keychain
                          This allows encryption of files that can be decrypted by others

  encrypt FILENAME ...    Encrypts one or more files with all the public keys in the keydir
                          Outputs the encrypted file(s) as FILENAME.gpg

  decrypt FILENAME ...    Decrypts one or more files with your keyring
                          Outputs the decrypted file(s) without the .gpg suffix

  clean                   Remove all decrypted files that have an encrypted counterpart

EOF

  exit 1
}

SCRIPTDIR=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
WORKDIR=$PWD

# Searches up the path for a dir. Changes directory. returns 0 if found, else 1
function upsearch () {
  test -d "$1" && return 0 || test / == "$PWD" && return 1 || cd .. && upsearch "$1"
}

# Search for the KEYDIRNAME, and restore working dir
KEYDIRNAME=.gpg-keys
upsearch $KEYDIRNAME || cd $WORKDIR
KEYDIR=$PWD/$KEYDIRNAME
KEYLIST=$KEYDIR/keylist
cd $WORKDIR


function die {
  echo $1
  exit 1
}


function encrypt_file {
  local decrypted_file=$1
  local encrypted_file=${decrypted_file}.gpg

  test -f "$decrypted_file" || die "ERROR: file does not exist: $decrypted_file"
  test -f "$KEYLIST" || die "ERROR: keylist not found at $KEYLIST"

  KEYIDS=`cat $KEYLIST | awk '{print $1}'`
  for id in $KEYIDS; do RECIPIENTS="$RECIPIENTS -r $id"; done
  test -n "$RECIPIENTS" || die "ERROR: No keys found in $KEYLIST"

  gpg --no-skip-hidden-recipients $RECIPIENTS -o $encrypted_file -e $decrypted_file
  echo "Encrypted as $encrypted_file"
}

function encrypt_files {
  test -n "$1" || die "ERROR: Must specify at least one file to encrypt"
  for f in $@; do echo "Encrypting $f"; encrypt_file $f; done
  echo "Completed. Finished encrypting $# file(s)."
}

function decrypt_file {
  local encrypted_file=$1
  local decrypted_file=`basename $encrypted_file .gpg`

  test -n "$encrypted_file" || usage "ERROR: must specify file to decrypt"

  gpg -o $decrypted_file -d $encrypted_file
  echo "Decrypted to $decrypted_file"
}

function decrypt_files {
  test -n "$1" || die "ERROR: Must specify at least one file to decrypt"
  for f in $@; do echo "Encrypting $f"; decrypt_file $f; done
  echo "Completed. Finished decrypting $# file(s)."
}

function export_keys {
  local keyid="$1"
  local keyname="${2:-${USER}_$(hostname)}"
  local keyfile="$KEYDIR/$keyname.pub"

  test -n "$keyid" || usage "ERROR: must set KEYID"
  test -n "$keyname" || usage "ERROR: must set KEYNAME"

  if [[ ! -d "$KEYDIR" ]]; then
    echo "Creating directory: $KEYDIR"
    mkdir -p `dirname $keyfile`
  fi

  if [[ -f "$keyfile" ]]; then
    die "Public key file with that name already exists. To replace it, remove it and it's keylist entry and rerun."
  fi

  gpg --export --armor -o $keyfile "$keyid"
  echo "$keyid $keyname" >> $KEYLIST
  echo "Complete. Exported $keyid as $keyname and added to the keylist."
}

function import_keys {
  for key in $KEYDIR/*.pub; do
    echo "Importing $key"
    gpg --import $key
  done

  echo "Finished importing all public keys. Ready to encrypt."
}


# rm all files that have a .gpg counterpart
function remove_decrypted_files {
  local cleandir=${2:-$WORKDIR}
  find $cleandir -type f -name "*.gpg" -exec basename '{}' '.gpg' \; | xargs rm -fv
}

CMD=$1
shift || usage

case $CMD in
    export )
        export_keys $@ ;;
    import )
        import_keys ;;
    encrypt )
        encrypt_files $@ ;;
    decrypt )
        decrypt_files $@ ;;
    clean )
        remove_decrypted_files "$2" ;;
    * )
        usage ;;
esac
